# This Python file uses the following encoding: utf-8

import telebot
import time
import datetime as dt
from database import con_db, que
from mod import mod, hh_core, infograph
from content import keys, cont


# –ü–µ—Ä—Å. –¥–∞–Ω–Ω—ã–µ
token = 'token'

# –ë–æ—Ç
bot = telebot.TeleBot(token, num_threads=10)

# –í—ã–∑–æ–≤—ã –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
alert_list = ('discl_m', )

# –û–±—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
return_list = ('‚Ü©Ô∏è –ö –Ω–∞—á–∞–ª—É', '‚ùå –û—Ç–º–µ–Ω–∞')

# –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
w_ist = {'hh': {},
         'avito': {},
         'sj': {}}

# –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
req_stor = {}


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['start'])
def init(message):

    mod.new_user_reg(message)
    start(message)

    return


# –°—Ç–∞—Ä—Ç
def start(message):

    u_id = message.chat.id
    m_text = message.text

    con_db.set_val(que.set_state_q,
                   (u_id,
                    '–°—Ç–∞—Ä—Ç',
                    'ordinary',
                    m_text))
    bot.send_message(u_id,
                     cont.start_mesage,
                     reply_markup=keys.start_m)

    return


# –°–ö–í–û–ó–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
#
# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.callback_query_handler(func=lambda call:
                            call.data in alert_list)
def alerts(call):

    if call.data == 'discl_m':
        con_db.set_val(que.new_log_q,
                       (call.u_id,
                        '–î–∏—Å–∫–ª–µ–π–º–µ—Ä',
                        'pop-up message',
                        None))
        bot.answer_callback_query(call.id,
                                  show_alert=True,
                                  text=cont.discl)  # –ó–ê–ú–ï–ù–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï

    return


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –≤—ã—Ö–æ–¥–∞
@bot.message_handler(func=lambda message:
                     message.text in return_list,
                     content_types=['text'])
def common_return(message):

    u_id = message.chat.id
    m_text = message.text

    if m_text == '‚Ü©Ô∏è –ö –Ω–∞—á–∞–ª—É':
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'return_to_prew',
                        m_text))
        bot.send_message(u_id,
                         '‚Ü©Ô∏è',
                         reply_markup=keys.start_m)

    elif m_text == '‚ùå –û—Ç–º–µ–Ω–∞':
        req_stor.pop(u_id, 0)
        w_ist['hh'] = {}
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'req_cancel',
                        m_text))
        bot.send_message(u_id,
                         '–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω ü´°',
                         reply_markup=keys.start_m)

    return


# –ú–ï–ù–Æ - –°—Ç–∞—Ä—Ç
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–°—Ç–∞—Ä—Ç',
                     content_types=['text'])
def start_main(message):

    u_id = message.chat.id
    m_text = message.text

    # –ü–∞—Ä—Å–∏–Ω–≥ - –º–µ–Ω—é
    if m_text == keys.start_b[0]:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥',
                        'ordinary',
                        m_text))
        bot.send_message(u_id,
                         cont.pars_t,
                         reply_markup=keys.pars_main_m)

    elif m_text == keys.start_b[1]:

        if len(w_ist['hh']) == 0:
            bot.send_message(u_id,
                             '–°–µ–π—á–∞—Å –ø–∞—Ä—Å–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω ‚úÖ',
                             reply_markup=keys.start_m)

        else:
            bot.send_message(u_id,
                             mod.pars_busy(w_ist['hh']['name'],
                                           w_ist['hh']['cr_dt'],
                                           w_ist['hh']['fc_finish']),
                             reply_markup=keys.start_m)

    # –†–∞–∑–¥–µ–ª—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    elif m_text in keys.start_b:
        bot.send_message(u_id,
                         cont.in_process_t,
                         reply_markup=keys.start_m)

    else:
        bot.send_message(u_id,
                         cont.invalid_command_t,
                         reply_markup=keys.start_m)

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥',
                     content_types=['text'])
def pars_main(message):

    u_id = message.chat.id
    m_text = message.text

    # –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ - HH.ru
    if m_text == keys.pars_main_b[0]:
        """bot.send_sticker(u_id,
                         cont.hh_sticker)"""
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru',
                        'ordinary',
                        m_text))
        bot.send_message(u_id,
                         cont.pars_hh_mode_t,
                         reply_markup=keys.pars_hh_mode_m)

    elif m_text in keys.pars_main_b:
        bot.send_message(u_id,
                         cont.in_process_t,
                         reply_markup=keys.pars_main_m)

    else:
        bot.send_message(u_id,
                         cont.invalid_command_t,
                         reply_markup=keys.pars_main_m)

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - —Ä–µ–∂–∏–º—ã
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru',
                     content_types=['text'])
def pars_hh_mode(message):

    u_id = message.chat.id
    m_text = message.text

    if m_text in keys.pars_hh_mode_b and len(req_stor) == 0:

        mod.init_hh_req(u_id, req_stor,
                        cont.a_mode_g_inv[m_text])

        cr_dt = req_stor[u_id]['user_req']['req_create']
        fc_finish = cr_dt + dt.timedelta(minutes=5)

        w_ist['hh'] = {'name': '–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
                       'cr_dt': cr_dt.strftime('%d.%m.%Y –≥. %H:%M'),
                       'fc_finish': fc_finish.strftime('%d.%m.%Y –≥. %H:%M')}

        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–¥–∞—Ç—ã',
                        'ordinary',
                        m_text))
        bot.send_message(u_id,
                         cont.pars_hh_date_t,
                         reply_markup=keys.pars_hh_date_m)

    else:

        if len(req_stor) != 0 and len(w_ist['hh']) != 0:
            bot.send_message(u_id,
                             mod.pars_busy(w_ist['hh']['name'],
                                           w_ist['hh']['cr_dt'],
                                           w_ist['hh']['fc_finish']),
                             reply_markup=keys.start_m)

        else:
            bot.send_message(u_id,
                             cont.invalid_command_t,
                             reply_markup=keys.pars_hh_mode_m)

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–¥–∞—Ç—ã',
                     content_types=['text'])
def pars_hh_date_range(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    if m_text in cont.date_preset:

        if m_text != '–°–µ–≥–æ–¥–Ω—è':

            dates = cont.date_preset[m_text]

            req_stor[u_id]['date_range'] = mod.date_to_range(dates)
            req_stor[u_id]['hh_req']['date_from'] = dates[0]
            req_stor[u_id]['hh_req']['date_to'] = dates[1]

        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–Ω–∞–∑–≤–∞–Ω–∏–µ',
                        'ordinary',
                        m_text))
        bot.send_message(u_id,
                         cont.pars_hh_name_t,
                         reply_markup=keys.req_cancel_m)

    else:

        res = mod.check_date(m_text)

        if res[0] == 0:

            req_stor[u_id]['date_range'] = mod.date_to_range(res)
            req_stor[u_id]['hh_req']['date_from'] = res[1][0]
            req_stor[u_id]['hh_req']['date_to'] = res[1][1]
            bot.send_message(u_id,
                             cont.pars_hh_name_t,
                             reply_markup=keys.req_cancel_m)

            con_db.set_val(que.set_state_q,
                           (u_id,
                            '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–Ω–∞–∑–≤–∞–Ω–∏–µ',
                            'ordinary',
                            m_text))
            bot.send_message(u_id,
                             cont.pars_hh_name_t,
                             reply_markup=keys.req_cancel_m)

        else:
            bot.send_message(u_id,
                             cont.check_date_res[res[0]],
                             reply_markup=keys.req_cancel_m)
            bot.send_message(u_id,
                             cont.pars_hh_date_reply_t,
                             reply_markup=keys.req_cancel_m)

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–Ω–∞–∑–≤–∞–Ω–∏–µ',
                     content_types=['text'])
def pars_hh_req_name(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞
    check = mod.check_req_name(m_text)

    if check[0] == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–∑–∞–ø—Ä–æ—Å',
                        'ordinary',
                        m_text))

        req_stor[u_id]['user_req']['req_name'] = check[1]

        w_ist['hh']['name'] = check[1]

        bot.send_message(u_id,
                         cont.pars_hh_title_t,
                         reply_markup=keys.req_cancel_m)

        bot.send_message(u_id,
                         cont.req_hh_info_t,
                         reply_markup=keys.req_hh_info_m)

    else:
        bot.send_message(u_id,
                         cont.check_req_name[check[0]],
                         reply_markup=keys.req_cancel_m)
    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–∑–∞–ø—Ä–æ—Å',
                     content_types=['text'])
def pars_hh_req_title(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    check = mod.check_req_title(m_text)

    if check == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–∏—Å–∫–ª—é—á–µ–Ω–∏—è',
                        'ordinary',
                        m_text))

        new_title = mod.transform_req_str(m_text)
        req_stor[u_id]['hh_req']['req_title'] = new_title
        bot.send_message(u_id,
                         cont.pars_hh_title_excl_t,
                         reply_markup=keys.excl_hh_m)

    else:
        bot.send_message(u_id,
                         cont.check_req_title[check],
                         reply_markup=keys.hidekey)

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–∏—Å–∫–ª—é—á–µ–Ω–∏—è',
                     content_types=['text'])
def pars_hh_req_excl(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    if m_text == keys.excl_hh_b[0]:
        check = 0

    else:
        check = mod.check_req_title(m_text)

        if check == 0:

            new_title = mod.transform_req_str(
                req_stor[u_id]['hh_req']['req_title'], m_text)
            req_stor[u_id]['hh_req']['req_title'] = new_title

        else:
            bot.send_message(u_id,
                             cont.check_req_title[check],
                             reply_markup=keys.excl_hh_m)

    if check != 0:
        pass

    # req_stor[u_id]['user_req']['req_type'] == 'only prew':

    else:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-—Ñ–∏–ª—å—Ç—Ä—ã',
                        'ordinary',
                        m_text))
        hh_core.insert_new_req(u_id, req_stor)
        bot.send_message(u_id,
                         cont.pars_hh_filter_t,
                         reply_markup=keys.pars_hh_filter_m)

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - —Ñ–∏–ª—å—Ç—Ä—ã
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-—Ñ–∏–ª—å—Ç—Ä—ã',
                     content_types=['text'])
def pars_hh_req_filters(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    # –í—ã–±–æ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    if m_text == keys.pars_hh_filter_b[0]:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-—Å—Ç–∞—Ä—Ç',
                        'simple_f',
                        m_text))
        bot.send_message(u_id,
                         cont.start_pars_hh_t,
                         reply_markup=keys.start_pars_hh_m)

    # –í—ã–±–æ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    elif m_text == keys.pars_hh_filter_b[1]:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–ø–æ–∏—Å–∫',
                        'custom_f',
                        m_text))
        bot.send_message(u_id,
                         cont.pars_hh_search_t,
                         reply_markup=keys.pars_hh_search_m)

        cur_text = mod.decode_str(req_stor[u_id]['hh_req']['search_field'],
                                  cont.search_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=keys.pars_hh_search_m)

    else:
        bot.send_message(u_id,
                         cont.invalid_command_t,
                         reply_markup=keys.pars_hh_filter_m)

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–ø–æ–∏—Å–∫',
                     content_types=['text'])
def pars_hh_req_search(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    if m_text in keys.pars_hh_search_b:

        req_stor[u_id]['hh_req']['search_field'] = cont.search_g_inv[m_text]

        dyn_markup = keys.gen_dyn_keys(cont.reg_g.values(),
                                       req_stor[u_id]['hh_req']['area'],
                                       cont.reg_g_inv,
                                       ex_but=['–î–∏—Å—Ç—Ä–∏–±—å—é—Ü–∏—è', '–ì–æ—Ä–æ–¥–∞'])

        bot.send_message(u_id,
                         cont.pars_hh_set_reg_t,
                         reply_markup=dyn_markup)

        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-—Ä–µ–≥–∏–æ–Ω',
                        'custom_f',
                        m_text))

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['area'],
                                  cont.reg_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    else:
        bot.send_message(u_id,
                         cont.invalid_command_t,
                         reply_markup=keys.pars_hh_search_m)

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - —Ä–µ–≥–∏–æ–Ω
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-—Ä–µ–≥–∏–æ–Ω',
                     content_types=['text'])
def pars_hh_req_region(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    if m_text == '–î–∏—Å—Ç—Ä–∏–±—å—é—Ü–∏—è':
        req_stor[u_id]['hh_req']['area'] = cont.reg_distr_preset[m_text]

        dyn_markup = keys.gen_dyn_keys(cont.reg_113.values(),
                                       req_stor[u_id]['hh_req']['area'],
                                       cont.reg_113_inv)

        bot.send_message(u_id,
                         cont.filter_accept_t,
                         reply_markup=dyn_markup)

        bot.send_message(u_id,
                         '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n\n‚úîÔ∏è - –î–∏—Å—Ç—Ä–∏–±—å—é—Ü–∏—è',
                         reply_markup=dyn_markup)

    elif m_text == '–ì–æ—Ä–æ–¥–∞':

        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–≥–æ—Ä–æ–¥–∞',
                        'custom_f',
                        m_text))

        req_stor[u_id]['hh_req']['area'] = ['113']

        dyn_markup = keys.gen_dyn_keys(cont.city_g.values(),
                                       req_stor[u_id]['hh_req']['area'],
                                       cont.city_g_inv,
                                       ex_but=['–†–µ–≥–∏–æ–Ω—ã'])

        bot.send_message(u_id,
                         cont.filter_accept_t,
                         reply_markup=dyn_markup)

        bot.send_message(u_id,
                         '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n\n‚úîÔ∏è - –í—Å–µ –≥–æ—Ä–æ–¥–∞',
                         reply_markup=dyn_markup)

    elif m_text in cont.reg_g.values():

        if cont.reg_g_inv[m_text] == '113' or req_stor[u_id]['hh_req']['area'] == ['113']:
            req_stor[u_id]['hh_req']['area'] = [cont.reg_g_inv[m_text]]

        else:
            req_stor[u_id]['hh_req']['area'].append(cont.reg_g_inv[m_text])

        dyn_markup = keys.gen_dyn_keys(cont.reg_g.values(),
                                       req_stor[u_id]['hh_req']['area'],
                                       cont.reg_g_inv,
                                       ex_but=['–î–∏—Å—Ç—Ä–∏–±—å—é—Ü–∏—è', '–ì–æ—Ä–æ–¥–∞'])

        bot.send_message(u_id,
                         cont.filter_accept_t,
                         reply_markup=dyn_markup)

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['area'],
                                  cont.reg_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    elif m_text == '‚û°Ô∏è –î–∞–ª–µ–µ':
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–∏–Ω–¥—É—Å—Ç—Ä–∏—è',
                        'custom_f',
                        m_text))

        dyn_markup = keys.gen_dyn_keys(cont.ind_g.values(),
                                       req_stor[u_id]['hh_req']['industry'],
                                       cont.ind_g_inv)

        bot.send_message(u_id,
                         cont.pars_hh_set_ind_t,
                         reply_markup=dyn_markup)

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['industry'],
                                  cont.ind_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    else:
        bot.send_message(u_id,
                         cont.invalid_command_t,
                         reply_markup=keys.gen_dyn_keys(cont.reg_g.values(),
                                                        req_stor[u_id]['hh_req']['area'],
                                                        cont.reg_g_inv,
                                                        ex_but=['–î–∏—Å—Ç—Ä–∏–±—å—é—Ü–∏—è', '–ì–æ—Ä–æ–¥–∞']))

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - –≥–æ—Ä–æ–¥–∞
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–≥–æ—Ä–æ–¥–∞',
                     content_types=['text'])
def pars_hh_req_city(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    if m_text == '–†–µ–≥–∏–æ–Ω—ã':

        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-—Ä–µ–≥–∏–æ–Ω',
                        'custom_f',
                        m_text))

        req_stor[u_id]['hh_req']['area'] = ['113']

        dyn_markup = keys.gen_dyn_keys(cont.reg_g.values(),
                                       req_stor[u_id]['hh_req']['area'],
                                       cont.reg_g_inv,
                                       ex_but=['–î–∏—Å—Ç—Ä–∏–±—å—é—Ü–∏—è', '–ì–æ—Ä–æ–¥–∞'])

        bot.send_message(u_id,
                         cont.filter_accept_t,
                         reply_markup=dyn_markup)

        bot.send_message(u_id,
                         '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n\n‚úîÔ∏è - –í—Å–µ –†–µ–≥–∏–æ–Ω—ã',
                         reply_markup=dyn_markup)

    elif m_text in cont.city_g.values():

        if cont.city_g_inv[m_text] == '113' or req_stor[u_id]['hh_req']['area'] == ['113']:
            req_stor[u_id]['hh_req']['area'] = [cont.city_g_inv[m_text]]

        else:
            req_stor[u_id]['hh_req']['area'].append(cont.city_g_inv[m_text])

        dyn_markup = keys.gen_dyn_keys(cont.city_g.values(),
                                       req_stor[u_id]['hh_req']['area'],
                                       cont.city_g_inv,
                                       ex_but=['–†–µ–≥–∏–æ–Ω—ã'])

        bot.send_message(u_id,
                         cont.filter_accept_t,
                         reply_markup=dyn_markup)

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['area'],
                                  cont.city_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    elif m_text == '‚û°Ô∏è –î–∞–ª–µ–µ':
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–∏–Ω–¥—É—Å—Ç—Ä–∏—è',
                        'custom_f',
                        m_text))

        dyn_markup = keys.gen_dyn_keys(cont.ind_g.values(),
                                       req_stor[u_id]['hh_req']['industry'],
                                       cont.ind_g_inv)

        bot.send_message(u_id,
                         cont.pars_hh_set_ind_t,
                         reply_markup=dyn_markup)

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['industry'],
                                  cont.ind_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    else:
        bot.send_message(u_id,
                         cont.invalid_command_t,
                         reply_markup=keys.gen_dyn_keys(cont.city_g.values(),
                                                        req_stor[u_id]['hh_req']['area'],
                                                        cont.city_g_inv))

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - –∏–Ω–¥—É—Å—Ç—Ä–∏—è
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–∏–Ω–¥—É—Å—Ç—Ä–∏—è',
                     content_types=['text'])
def pars_hh_req_industry(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    if m_text in cont.ind_g.values():

        if cont.ind_g_inv[m_text] is None or req_stor[u_id]['hh_req']['industry'] == [None]:
            req_stor[u_id]['hh_req']['industry'] = [cont.ind_g_inv[m_text]]

        else:
            req_stor[u_id]['hh_req']['industry'].append(cont.ind_g_inv[m_text])

        dyn_markup = keys.gen_dyn_keys(cont.ind_g.values(),
                                       req_stor[u_id]['hh_req']['industry'],
                                       cont.ind_g_inv)

        bot.send_message(u_id,
                         cont.filter_accept_t,
                         reply_markup=keys.gen_dyn_keys(cont.ind_g.values(),
                                                        req_stor[u_id]['hh_req']['industry'],
                                                        cont.ind_g_inv))

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['industry'],
                                  cont.ind_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    elif m_text == '‚û°Ô∏è –î–∞–ª–µ–µ':
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–∫–æ–º–ø–∞–Ω–∏–∏',
                        'custom_f',
                        m_text))

        dyn_markup = keys.gen_dyn_keys(cont.empl_g.values(),
                                       req_stor[u_id]['hh_req']['employer_id'],
                                       cont.empl_g_inv)

        bot.send_message(u_id,
                         cont.pars_hh_set_empl_t,
                         reply_markup=dyn_markup)

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['employer_id'],
                                  cont.empl_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    else:
        bot.send_message(u_id,
                         cont.invalid_command_t,
                         reply_markup=keys.gen_dyn_keys(cont.ind_g.values(),
                                                        req_stor[u_id]['hh_req']['industry'],
                                                        cont.ind_g_inv))

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - –∫–æ–º–ø–∞–Ω–∏–∏
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–∫–æ–º–ø–∞–Ω–∏–∏',
                     content_types=['text'])
def pars_hh_req_employer(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    if m_text in cont.empl_g.values():

        if cont.empl_g_inv[m_text] == [None] or req_stor[u_id]['hh_req']['employer_id'] == [None]:
            req_stor[u_id]['hh_req']['employer_id'] = [cont.empl_g_inv[m_text]]

        else:
            req_stor[u_id]['hh_req']['employer_id'].append(cont.empl_g_inv[m_text])

        dyn_markup = keys.gen_dyn_keys(cont.empl_g.values(),
                                       req_stor[u_id]['hh_req']['employer_id'],
                                       cont.empl_g_inv)

        bot.send_message(u_id,
                         cont.filter_accept_t,
                         reply_markup=dyn_markup)

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['employer_id'],
                                  cont.empl_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    elif m_text == '‚û°Ô∏è –î–∞–ª–µ–µ':
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–æ–ø—ã—Ç',
                        'custom_f',
                        m_text))

        dyn_markup = keys.gen_dyn_keys(cont.exp_g.values(),
                                       req_stor[u_id]['hh_req']['experience'],
                                       cont.exp_g_inv)

        bot.send_message(u_id,
                         cont.pars_hh_set_exp_t,
                         reply_markup=dyn_markup)

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['experience'],
                                  cont.exp_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    else:
        bot.send_message(u_id,
                         cont.invalid_command_t,
                         reply_markup=keys.keys.gen_dyn_keys(cont.empl_g.values(),
                                                             req_stor[u_id]['hh_req']['employer_id'],
                                                             cont.empl_g_inv))

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–æ–ø—ã—Ç',
                     content_types=['text'])
def pars_hh_req_exp(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    if m_text in cont.exp_g.values():

        if cont.exp_g_inv[m_text] == [None] or req_stor[u_id]['hh_req']['experience'] == [None]:
            req_stor[u_id]['hh_req']['experience'] = [cont.exp_g_inv[m_text]]

        else:
            req_stor[u_id]['hh_req']['experience'].append(cont.exp_g_inv[m_text])

        dyn_markup = keys.gen_dyn_keys(cont.exp_g.values(),
                                       req_stor[u_id]['hh_req']['experience'],
                                       cont.exp_g_inv)

        bot.send_message(u_id,
                         cont.filter_accept_t,
                         reply_markup=dyn_markup)

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['experience'],
                                  cont.exp_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    elif m_text == '‚û°Ô∏è –î–∞–ª–µ–µ':
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
                        'custom_f',
                        m_text))

        dyn_markup = keys.gen_dyn_keys(cont.employment_g.values(),
                                       req_stor[u_id]['hh_req']['employment'],
                                       cont.employment_g_inv)

        bot.send_message(u_id,
                         cont.pars_hh_set_employment_t,
                         reply_markup=dyn_markup)

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['employment'],
                                  cont.employment_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    else:
        bot.send_message(u_id,
                         cont.invalid_command_t,
                         reply_markup=keys.keys.gen_dyn_keys(cont.exp_g.values(),
                                                             req_stor[u_id]['hh_req']['experience'],
                                                             cont.exp_g_inv))

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - —Ñ–æ—Ä–º–∞—Ç —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
                     content_types=['text'])
def pars_hh_req_employment(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    if m_text in cont.employment_g.values():

        if cont.employment_g_inv[m_text] == [None] or req_stor[u_id]['hh_req']['employment'] == [None]:
            req_stor[u_id]['hh_req']['employment'] = [cont.employment_g_inv[m_text]]

        else:
            req_stor[u_id]['hh_req']['employment'].append(cont.employment_g_inv[m_text])

        dyn_markup = keys.gen_dyn_keys(cont.employment_g.values(),
                                       req_stor[u_id]['hh_req']['employment'],
                                       cont.employment_g_inv)

        bot.send_message(u_id,
                         cont.filter_accept_t,
                         reply_markup=dyn_markup)

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['employment'],
                                  cont.employment_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    elif m_text == '‚û°Ô∏è –î–∞–ª–µ–µ':
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–≥—Ä–∞—Ñ–∏–∫',
                        'custom_f',
                        m_text))

        dyn_markup = keys.gen_dyn_keys(cont.sched_g.values(),
                                       req_stor[u_id]['hh_req']['schedule'],
                                       cont.sched_g_inv)

        bot.send_message(u_id,
                         cont.pars_hh_set_sched_t,
                         reply_markup=dyn_markup)

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['schedule'],
                                  cont.sched_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    else:
        bot.send_message(u_id,
                         cont.invalid_command_t,
                         reply_markup=keys.gen_dyn_keys(cont.employment_g.values(),
                                                        req_stor[u_id]['hh_req']['employment'],
                                                        cont.employment_g_inv))

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - —Ç–∏–ø—ã –≥—Ä–∞—Ñ–∏–∫–∞
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-–≥—Ä–∞—Ñ–∏–∫',
                     content_types=['text'])
def pars_hh_req_sched(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    if m_text in cont.sched_g.values():

        if cont.sched_g_inv[m_text] == [None] or req_stor[u_id]['hh_req']['schedule'] == [None]:
            req_stor[u_id]['hh_req']['schedule'] = [cont.sched_g_inv[m_text]]

        else:
            req_stor[u_id]['hh_req']['schedule'].append(cont.sched_g_inv[m_text])

        dyn_markup = keys.gen_dyn_keys(cont.sched_g.values(),
                                       req_stor[u_id]['hh_req']['schedule'],
                                       cont.sched_g_inv)

        bot.send_message(u_id,
                         cont.filter_accept_t,
                         reply_markup=dyn_markup)

        cur_text = mod.decode_lst(req_stor[u_id]['hh_req']['schedule'],
                                  cont.sched_g)

        bot.send_message(u_id,
                         f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨áÔ∏è\n{cur_text}',
                         reply_markup=dyn_markup)

    elif m_text == '‚û°Ô∏è –î–∞–ª–µ–µ':
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-—Å—Ç–∞—Ä—Ç',
                        'custom_f',
                        m_text))
        bot.send_message(u_id,
                         cont.start_pars_hh_t,
                         reply_markup=keys.start_pars_hh_m)

    else:
        bot.send_message(u_id,
                         cont.invalid_command_t,
                         reply_markup=keys.gen_dyn_keys(cont.sched_g.values(),
                                                        req_stor[u_id]['hh_req']['schedule'],
                                                        cont.sched_g_inv))

    return


# –ú–ï–ù–Æ - –ø–∞—Ä—Å–µ—Ä - hh.ru - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
@bot.message_handler(func=lambda message:
                     mod.act_state_msg(message) == '–ü–∞—Ä—Å–∏–Ω–≥-hh.ru-—Å—Ç–∞—Ä—Ç',
                     content_types=['text'])
def pars_hh_start(message):

    u_id = message.chat.id
    m_text = message.text

    if req_stor.setdefault(u_id, 0) == 0:
        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'empty_req_error',
                        m_text))
        bot.send_message(u_id,
                         cont.empty_req_error_t,
                         reply_markup=keys.start_m)
        w_ist['hh'] = {}

        return

    if m_text in keys.start_pars_hh_b:

        fc = mod.prew_time_forecast(len(req_stor[u_id]['date_range'][0]))

        fc_from = time.strftime("%H:%M:%S", time.gmtime(int(fc[0])))
        fc_to = time.strftime("%H:%M:%S", time.gmtime(int(fc[1])))

        fc_finish = dt.datetime.now() + dt.timedelta(seconds=fc[1])

        w_ist['hh']['fc_finish'] = fc_finish.strftime('%d.%m.%Y –≥. %H:%M')

        bot.send_message(u_id,
                         f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n–û—Ç: {fc_from}\n–î–æ: {fc_to}',
                         reply_markup=keys.start_m)

        con_db.set_val(que.set_state_q,
                       (u_id,
                        '–°—Ç–∞—Ä—Ç',
                        'ordinary',
                        m_text))

        res = hh_core.get_hh_pages(u_id, req_stor)

        if res[0] > 9:
            path = infograph.create_hh_report(u_id, req_stor)

            bot.send_message(u_id,
                             f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {res[0]}\n–û—Ç {res[1]} –∫–æ–º–ø–∞–Ω–∏–π',
                             reply_markup=keys.back_m)

            bot.send_document(u_id,
                              open(r''+path, 'rb'))

            if req_stor[u_id]['user_req']['req_type'] == 'full':
                hh_core.get_hh_vac(u_id, req_stor)

            req_stor.pop(u_id, 0)
            w_ist['hh'] = {}

        else:
            bot.send_message(u_id,
                             cont.short_df_except_t,
                             reply_markup=keys.back_m)
            req_stor.pop(u_id, 0)
            w_ist['hh'] = {}

    else:
        bot.send_message(u_id,
                         cont.invalid_command_t,
                         keys.start_pars_hh_m)

    return


# –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
bot.polling(none_stop=True)
